baf4f54c57776de9e0f49667b89bcd0c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _EventEmitter2 = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));

var _EventSubscriptionVendor = _interopRequireDefault(require("../vendor/emitter/_EventSubscriptionVendor"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
    }

    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
    }

    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error('`' + eventType + '` event should be registered via the AppState module');
    }
  }
}

var RCTDeviceEventEmitter = function (_EventEmitter) {
  (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);

  var _super = _createSuper(RCTDeviceEventEmitter);

  function RCTDeviceEventEmitter() {
    var _this;

    (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);
    var sharedSubscriber = new _EventSubscriptionVendor.default();
    _this = _super.call(this, sharedSubscriber);
    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  (0, _createClass2.default)(RCTDeviceEventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }

      return (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }

      (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }
  }]);
  return RCTDeviceEventEmitter;
}(_EventEmitter2.default);

var _default = new RCTDeviceEventEmitter();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVERldmljZUV2ZW50RW1pdHRlci5qcyJdLCJuYW1lcyI6WyJjaGVja05hdGl2ZUV2ZW50TW9kdWxlIiwiZXZlbnRUeXBlIiwibGFzdEluZGV4T2YiLCJFcnJvciIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsInNoYXJlZFN1YnNjcmliZXIiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsImxpc3RlbmVyIiwiY29udGV4dCIsIl9fREVWX18iLCJzdWJzY3JpcHRpb24iLCJlbWl0dGVyIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwiRXZlbnRFbWl0dGVyIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUE7Ozs7OztBQUVBLFNBQVNBLHNCQUFULENBQWdDQyxTQUFoQyxFQUFvRDtBQUNsRCxNQUFJQSxTQUFKLEVBQWU7QUFDYixRQUFJQSxTQUFTLENBQUNDLFdBQVYsQ0FBc0IsV0FBdEIsRUFBbUMsQ0FBbkMsTUFBMEMsQ0FBOUMsRUFBaUQ7QUFDL0MsWUFBTSxJQUFJQyxLQUFKLENBQ0osTUFDRUYsU0FERixHQUVFLDBEQUhFLENBQU47QUFLRDs7QUFDRCxRQUFJQSxTQUFTLENBQUNDLFdBQVYsQ0FBc0IsVUFBdEIsRUFBa0MsQ0FBbEMsTUFBeUMsQ0FBN0MsRUFBZ0Q7QUFDOUMsWUFBTSxJQUFJQyxLQUFKLENBQ0osTUFDRUYsU0FERixHQUVFLHNEQUhFLENBQU47QUFLRDs7QUFDRCxRQUFJQSxTQUFTLEtBQUssbUJBQWQsSUFBcUNBLFNBQVMsS0FBSyxlQUF2RCxFQUF3RTtBQUN0RSxZQUFNLElBQUlFLEtBQUosQ0FDSixNQUNFRixTQURGLEdBRUUsc0RBSEUsQ0FBTjtBQUtEO0FBQ0Y7QUFDRjs7SUFNS0cscUI7Ozs7O0FBR0osbUNBQWM7QUFBQTs7QUFBQTtBQUNaLFFBQU1DLGdCQUFnQixHQUFHLElBQUlDLGdDQUFKLEVBQXpCO0FBQ0EsOEJBQU1ELGdCQUFOO0FBQ0EsVUFBS0EsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUhZO0FBSWI7Ozs7V0FFRCxxQkFDRUosU0FERixFQUVFTSxRQUZGLEVBR0VDLE9BSEYsRUFJdUI7QUFDckIsVUFBSUMsT0FBSixFQUFhO0FBQ1hULFFBQUFBLHNCQUFzQixDQUFDQyxTQUFELENBQXRCO0FBQ0Q7O0FBQ0QsZ0lBQXlCQSxTQUF6QixFQUFvQ00sUUFBcEMsRUFBOENDLE9BQTlDO0FBQ0Q7OztXQUVELDRCQUFtQlAsU0FBbkIsRUFBdUM7QUFDckMsVUFBSVEsT0FBSixFQUFhO0FBQ1hULFFBQUFBLHNCQUFzQixDQUFDQyxTQUFELENBQXRCO0FBQ0Q7O0FBQ0QsZ0lBQXlCQSxTQUF6QjtBQUNEOzs7V0FFRCw0QkFBbUJTLFlBQW5CLEVBQXNEO0FBQ3BELFVBQUlBLFlBQVksQ0FBQ0MsT0FBYixLQUF5QixJQUE3QixFQUFtQztBQUNqQ0QsUUFBQUEsWUFBWSxDQUFDQyxPQUFiLENBQXFCQyxrQkFBckIsQ0FBd0NGLFlBQXhDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsa0lBQXlCQSxZQUF6QjtBQUNEO0FBQ0Y7OztFQWpDaUNHLHNCOztlQW9DcEIsSUFBSVQscUJBQUosRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCB0eXBlIEVtaXR0ZXJTdWJzY3JpcHRpb24gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvX0VtaXR0ZXJTdWJzY3JpcHRpb24nO1xuaW1wb3J0IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL19FdmVudFN1YnNjcmlwdGlvblZlbmRvcic7XG5cbmZ1bmN0aW9uIGNoZWNrTmF0aXZlRXZlbnRNb2R1bGUoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gIGlmIChldmVudFR5cGUpIHtcbiAgICBpZiAoZXZlbnRUeXBlLmxhc3RJbmRleE9mKCdzdGF0dXNCYXInLCAwKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYCcgK1xuICAgICAgICAgIGV2ZW50VHlwZSArXG4gICAgICAgICAgJ2AgZXZlbnQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdmlhIHRoZSBTdGF0dXNCYXJJT1MgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUubGFzdEluZGV4T2YoJ2tleWJvYXJkJywgMCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2AnICtcbiAgICAgICAgICBldmVudFR5cGUgK1xuICAgICAgICAgICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgS2V5Ym9hcmQgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUgPT09ICdhcHBTdGF0ZURpZENoYW5nZScgfHwgZXZlbnRUeXBlID09PSAnbWVtb3J5V2FybmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2AnICtcbiAgICAgICAgICBldmVudFR5cGUgK1xuICAgICAgICAgICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgQXBwU3RhdGUgbW9kdWxlJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZCAtIHN1YmNsYXNzIE5hdGl2ZUV2ZW50RW1pdHRlciB0byBjcmVhdGUgZ3JhbnVsYXIgZXZlbnQgbW9kdWxlcyBpbnN0ZWFkIG9mXG4gKiBhZGRpbmcgYWxsIGV2ZW50IGxpc3RlbmVycyBkaXJlY3RseSB0byBSQ1REZXZpY2VFdmVudEVtaXR0ZXIuXG4gKi9cbmNsYXNzIFJDVERldmljZUV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHNoYXJlZFN1YnNjcmliZXI6IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHNoYXJlZFN1YnNjcmliZXIgPSBuZXcgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IoKTtcbiAgICBzdXBlcihzaGFyZWRTdWJzY3JpYmVyKTtcbiAgICB0aGlzLnNoYXJlZFN1YnNjcmliZXIgPSBzaGFyZWRTdWJzY3JpYmVyO1xuICB9XG5cbiAgYWRkTGlzdGVuZXIoXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgbGlzdGVuZXI6IEZ1bmN0aW9uLFxuICAgIGNvbnRleHQ6ID9PYmplY3QsXG4gICk6IEVtaXR0ZXJTdWJzY3JpcHRpb24ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjaGVja05hdGl2ZUV2ZW50TW9kdWxlKGV2ZW50VHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5hZGRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgfVxuXG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudFR5cGU6ID9zdHJpbmcpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY2hlY2tOYXRpdmVFdmVudE1vZHVsZShldmVudFR5cGUpO1xuICAgIH1cbiAgICBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IEVtaXR0ZXJTdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLmVtaXR0ZXIgIT09IHRoaXMpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5lbWl0dGVyLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKG5ldyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIoKTogUkNURGV2aWNlRXZlbnRFbWl0dGVyKTtcbiJdfQ==