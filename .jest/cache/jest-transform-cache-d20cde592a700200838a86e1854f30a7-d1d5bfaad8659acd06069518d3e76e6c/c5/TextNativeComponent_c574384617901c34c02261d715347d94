27232cb91280ed7b7c99f8b99aa25756
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));

var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = _UIManager.default.getViewManagerConfig('RCTVirtualText') == null ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsiTmF0aXZlVGV4dCIsInZhbGlkQXR0cmlidXRlcyIsIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMiLCJVSVZpZXciLCJpc0hpZ2hsaWdodGVkIiwibnVtYmVyT2ZMaW5lcyIsImVsbGlwc2l6ZU1vZGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwibWF4Rm9udFNpemVNdWx0aXBsaWVyIiwiZGlzYWJsZWQiLCJzZWxlY3RhYmxlIiwic2VsZWN0aW9uQ29sb3IiLCJhZGp1c3RzRm9udFNpemVUb0ZpdCIsIm1pbmltdW1Gb250U2NhbGUiLCJ0ZXh0QnJlYWtTdHJhdGVneSIsIm9uVGV4dExheW91dCIsIm9uSW5saW5lVmlld0xheW91dCIsImRhdGFEZXRlY3RvclR5cGUiLCJkaXJlY3RFdmVudFR5cGVzIiwidG9wVGV4dExheW91dCIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BJbmxpbmVWaWV3TGF5b3V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiTmF0aXZlVmlydHVhbFRleHQiLCJVSU1hbmFnZXIiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBVU8sSUFBTUEsVUFBMEMsR0FBSSw4Q0FDekQsU0FEeUQsRUFFekQ7QUFBQSxTQUFPO0FBQ0xDLElBQUFBLGVBQWUsNkJBQ1ZDLG1DQUEwQkMsTUFEaEI7QUFFYkMsTUFBQUEsYUFBYSxFQUFFLElBRkY7QUFHYkMsTUFBQUEsYUFBYSxFQUFFLElBSEY7QUFJYkMsTUFBQUEsYUFBYSxFQUFFLElBSkY7QUFLYkMsTUFBQUEsZ0JBQWdCLEVBQUUsSUFMTDtBQU1iQyxNQUFBQSxxQkFBcUIsRUFBRSxJQU5WO0FBT2JDLE1BQUFBLFFBQVEsRUFBRSxJQVBHO0FBUWJDLE1BQUFBLFVBQVUsRUFBRSxJQVJDO0FBU2JDLE1BQUFBLGNBQWMsRUFBRSxJQVRIO0FBVWJDLE1BQUFBLG9CQUFvQixFQUFFLElBVlQ7QUFXYkMsTUFBQUEsZ0JBQWdCLEVBQUUsSUFYTDtBQVliQyxNQUFBQSxpQkFBaUIsRUFBRSxJQVpOO0FBYWJDLE1BQUFBLFlBQVksRUFBRSxJQWJEO0FBY2JDLE1BQUFBLGtCQUFrQixFQUFFLElBZFA7QUFlYkMsTUFBQUEsZ0JBQWdCLEVBQUU7QUFmTCxNQURWO0FBa0JMQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsTUFBQUEsYUFBYSxFQUFFO0FBQ2JDLFFBQUFBLGdCQUFnQixFQUFFO0FBREwsT0FEQztBQUloQkMsTUFBQUEsbUJBQW1CLEVBQUU7QUFDbkJELFFBQUFBLGdCQUFnQixFQUFFO0FBREM7QUFKTCxLQWxCYjtBQTBCTEUsSUFBQUEsZUFBZSxFQUFFO0FBMUJaLEdBQVA7QUFBQSxDQUZ5RCxDQUFwRDs7QUFnQ0EsSUFBTUMsaUJBQWlELEdBQzVEQyxtQkFBVUMsb0JBQVYsQ0FBK0IsZ0JBQS9CLEtBQW9ELElBQXBELEdBQ0l6QixVQURKLEdBRUssOENBQWdDLGdCQUFoQyxFQUFrRDtBQUFBLFNBQU87QUFDeERDLElBQUFBLGVBQWUsNkJBQ1ZDLG1DQUEwQkMsTUFEaEI7QUFFYkMsTUFBQUEsYUFBYSxFQUFFLElBRkY7QUFHYkksTUFBQUEscUJBQXFCLEVBQUU7QUFIVixNQUR5QztBQU14RGMsSUFBQUEsZUFBZSxFQUFFO0FBTnVDLEdBQVA7QUFBQSxDQUFsRCxDQUhBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHt0eXBlIEhvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyc7XG5pbXBvcnQge3R5cGUgUHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHt0eXBlIFRleHRQcm9wc30gZnJvbSAnLi9UZXh0UHJvcHMnO1xuXG50eXBlIE5hdGl2ZVRleHRQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlRleHRQcm9wcyxcbiAgaXNIaWdobGlnaHRlZD86ID9ib29sZWFuLFxuICBzZWxlY3Rpb25Db2xvcj86ID9Qcm9jZXNzZWRDb2xvclZhbHVlLFxufT47XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPSAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyhcbiAgJ1JDVFRleHQnLFxuICAoKSA9PiAoe1xuICAgIHZhbGlkQXR0cmlidXRlczoge1xuICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgbnVtYmVyT2ZMaW5lczogdHJ1ZSxcbiAgICAgIGVsbGlwc2l6ZU1vZGU6IHRydWUsXG4gICAgICBhbGxvd0ZvbnRTY2FsaW5nOiB0cnVlLFxuICAgICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgICAgc2VsZWN0aW9uQ29sb3I6IHRydWUsXG4gICAgICBhZGp1c3RzRm9udFNpemVUb0ZpdDogdHJ1ZSxcbiAgICAgIG1pbmltdW1Gb250U2NhbGU6IHRydWUsXG4gICAgICB0ZXh0QnJlYWtTdHJhdGVneTogdHJ1ZSxcbiAgICAgIG9uVGV4dExheW91dDogdHJ1ZSxcbiAgICAgIG9uSW5saW5lVmlld0xheW91dDogdHJ1ZSxcbiAgICAgIGRhdGFEZXRlY3RvclR5cGU6IHRydWUsXG4gICAgfSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BUZXh0TGF5b3V0OiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblRleHRMYXlvdXQnLFxuICAgICAgfSxcbiAgICAgIHRvcElubGluZVZpZXdMYXlvdXQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uSW5saW5lVmlld0xheW91dCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG4gIH0pLFxuKTogYW55KTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVZpcnR1YWxUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ1JDVFZpcnR1YWxUZXh0JykgPT0gbnVsbFxuICAgID8gTmF0aXZlVGV4dFxuICAgIDogKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFZpcnR1YWxUZXh0JywgKCkgPT4gKHtcbiAgICAgICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFZpcnR1YWxUZXh0JyxcbiAgICAgIH0pKTogYW55KTtcbiJdfQ==