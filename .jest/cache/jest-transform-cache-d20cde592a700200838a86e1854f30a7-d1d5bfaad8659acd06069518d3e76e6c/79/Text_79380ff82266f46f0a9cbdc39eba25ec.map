{"version":3,"sources":["Text.js"],"names":["DeprecatedTextPropTypes","require","React","TextAncestor","Touchable","nullthrows","processColor","PRESS_RECT_OFFSET","top","left","right","bottom","TouchableText","state","Mixin","touchableGetInitialState","isHighlighted","createResponderHandlers","_createResponseHandlers","bind","responseHandlers","props","forwardedRef","selectionColor","isTouchable","__DEV__","TOUCH_TARGET_DEBUG","onPress","style","color","hasTextAncestor","onStartShouldSetResponder","shouldSetResponder","_attachTouchHandlers","onResponderGrant","event","touchableHandleResponderGrant","call","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","touchableGetPressRectOffset","key","touchableHandleActivePressIn","suppressHighlighting","setState","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","onLongPress","pressRetentionOffset","nextProps","prevState","Component","defaultProps","accessible","allowFontScaling","ellipsizeMode","Text","forwardRef","displayName","propTypes","TextToExport","TextInjection","unstable_Text","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport TextInjection from './TextInjection';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\n\nconst DeprecatedTextPropTypes = require('../DeprecatedPropTypes/DeprecatedTextPropTypes');\nconst React = require('react');\nconst TextAncestor = require('./TextAncestor');\nconst Touchable = require('../Components/Touchable/Touchable');\n\nconst nullthrows = require('nullthrows');\nconst processColor = require('../StyleSheet/processColor');\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {PressRetentionOffset, TextProps} from './TextProps';\n\ntype ResponseHandlers = $ReadOnly<{|\n  onStartShouldSetResponder: () => boolean,\n  onResponderGrant: (event: PressEvent) => void,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...TextProps,\n  forwardedRef: ?React.Ref<typeof NativeText | typeof NativeVirtualText>,\n|}>;\n\ntype State = {|\n  touchable: {|\n    touchState: ?string,\n    responderID: ?number,\n  |},\n  isHighlighted: boolean,\n  createResponderHandlers: () => ResponseHandlers,\n  responseHandlers: ?ResponseHandlers,\n|};\n\nconst PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\n/**\n * A React component for displaying text.\n *\n * See https://reactnative.dev/docs/text.html\n */\nclass TouchableText extends React.Component<Props, State> {\n  static defaultProps = {\n    accessible: true,\n    allowFontScaling: true,\n    ellipsizeMode: 'tail',\n  };\n\n  touchableGetPressRectOffset: ?() => PressRetentionOffset;\n  touchableHandleActivePressIn: ?() => void;\n  touchableHandleActivePressOut: ?() => void;\n  touchableHandleLongPress: ?(event: PressEvent) => void;\n  touchableHandlePress: ?(event: PressEvent) => void;\n  touchableHandleResponderGrant: ?(event: PressEvent) => void;\n  touchableHandleResponderMove: ?(event: PressEvent) => void;\n  touchableHandleResponderRelease: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminate: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminationRequest: ?() => boolean;\n\n  state = {\n    ...Touchable.Mixin.touchableGetInitialState(),\n    isHighlighted: false,\n    createResponderHandlers: this._createResponseHandlers.bind(this),\n    responseHandlers: null,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State,\n  ): $Shape<State> | null {\n    return prevState.responseHandlers == null && isTouchable(nextProps)\n      ? {\n          responseHandlers: prevState.createResponderHandlers(),\n        }\n      : null;\n  }\n\n  render(): React.Node {\n    let {forwardedRef, selectionColor, ...props} = this.props;\n    if (isTouchable(this.props)) {\n      props = {\n        ...props,\n        ...this.state.responseHandlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (selectionColor != null) {\n      props = {\n        ...props,\n        selectionColor: processColor(selectionColor),\n      };\n    }\n    if (__DEV__) {\n      if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n        props = {\n          ...props,\n          style: [props.style, {color: 'magenta'}],\n        };\n      }\n    }\n    return (\n      <TextAncestor.Consumer>\n        {hasTextAncestor =>\n          hasTextAncestor ? (\n            // $FlowFixMe[prop-missing] For the `onClick` workaround.\n            <NativeVirtualText\n              {...props}\n              // This is used on Android to call a nested Text component's press handler from the context menu.\n              // TODO T75145059 Clean this up once Text is migrated off of Touchable\n              onClick={props.onPress}\n              ref={forwardedRef}\n            />\n          ) : (\n            <TextAncestor.Provider value={true}>\n              <NativeText {...props} ref={forwardedRef} />\n            </TextAncestor.Provider>\n          )\n        }\n      </TextAncestor.Consumer>\n    );\n  }\n\n  _createResponseHandlers(): ResponseHandlers {\n    return {\n      onStartShouldSetResponder: (): boolean => {\n        const {onStartShouldSetResponder} = this.props;\n        const shouldSetResponder =\n          (onStartShouldSetResponder == null\n            ? false\n            : onStartShouldSetResponder()) || isTouchable(this.props);\n\n        if (shouldSetResponder) {\n          this._attachTouchHandlers();\n        }\n        return shouldSetResponder;\n      },\n      onResponderGrant: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderGrant)(event);\n        if (this.props.onResponderGrant != null) {\n          this.props.onResponderGrant.call(this, event);\n        }\n      },\n      onResponderMove: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderMove)(event);\n        if (this.props.onResponderMove != null) {\n          this.props.onResponderMove.call(this, event);\n        }\n      },\n      onResponderRelease: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderRelease)(event);\n        if (this.props.onResponderRelease != null) {\n          this.props.onResponderRelease.call(this, event);\n        }\n      },\n      onResponderTerminate: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderTerminate)(event);\n        if (this.props.onResponderTerminate != null) {\n          this.props.onResponderTerminate.call(this, event);\n        }\n      },\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this.props;\n        if (!nullthrows(this.touchableHandleResponderTerminationRequest)()) {\n          return false;\n        }\n        if (onResponderTerminationRequest == null) {\n          return true;\n        }\n        return onResponderTerminationRequest();\n      },\n    };\n  }\n\n  /**\n   * Lazily attaches Touchable.Mixin handlers.\n   */\n  _attachTouchHandlers(): void {\n    if (this.touchableGetPressRectOffset != null) {\n      return;\n    }\n    for (const key in Touchable.Mixin) {\n      if (typeof Touchable.Mixin[key] === 'function') {\n        (this: any)[key] = Touchable.Mixin[key].bind(this);\n      }\n    }\n    this.touchableHandleActivePressIn = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: true});\n      }\n    };\n    this.touchableHandleActivePressOut = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: false});\n      }\n    };\n    this.touchableHandlePress = (event: PressEvent): void => {\n      if (this.props.onPress != null) {\n        this.props.onPress(event);\n      }\n    };\n    this.touchableHandleLongPress = (event: PressEvent): void => {\n      if (this.props.onLongPress != null) {\n        this.props.onLongPress(event);\n      }\n    };\n    this.touchableGetPressRectOffset = (): PressRetentionOffset =>\n      this.props.pressRetentionOffset == null\n        ? PRESS_RECT_OFFSET\n        : this.props.pressRetentionOffset;\n  }\n}\n\nconst isTouchable = (props: Props): boolean =>\n  props.onPress != null ||\n  props.onLongPress != null ||\n  props.onStartShouldSetResponder != null;\n\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef(\n  (\n    props: TextProps,\n    forwardedRef: ?React.Ref<typeof NativeText | typeof NativeVirtualText>,\n  ) => {\n    return <TouchableText {...props} forwardedRef={forwardedRef} />;\n  },\n);\nText.displayName = 'Text';\n\n// TODO: Deprecate this.\n/* $FlowFixMe(>=0.89.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.89 was deployed. To see the error, delete this comment\n * and run Flow. */\nText.propTypes = DeprecatedTextPropTypes;\n\nconst TextToExport: typeof Text &\n  $ReadOnly<{|\n    propTypes: typeof DeprecatedTextPropTypes,\n  |}> =\n  // $FlowFixMe[incompatible-type] - No good way to type a React.AbstractComponent with statics.\n  TextInjection.unstable_Text == null ? Text : TextInjection.unstable_Text;\n\nmodule.exports = TextToExport;\n"]}