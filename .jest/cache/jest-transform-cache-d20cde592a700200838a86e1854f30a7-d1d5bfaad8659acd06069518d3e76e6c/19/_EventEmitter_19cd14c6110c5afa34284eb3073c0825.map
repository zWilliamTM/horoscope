{"version":3,"sources":["_EventEmitter.js"],"names":["invariant","require","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","eventType","listener","context","addSubscription","EmitterSubscription","removeAllSubscriptions","subscription","emitter","removeSubscription","subscriptions","getSubscriptionsForType","filter","length","i","l","apply","Array","prototype","slice","call","arguments","remove","module","exports"],"mappings":"AAWA;;;;;;;;AAIA;;AACA;;AAHA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAKA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,IAAN;AAAA,CAA9B;;IAeMC,Y;AASJ,wBAAYC,UAAZ,EAAkD;AAAA;AAChD,SAAKC,WAAL,GAAmBD,UAAU,IAAI,IAAIE,gCAAJ,EAAjC;AACD;;;;WAgBD,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIuB;AACrB,aAAQ,KAAKJ,WAAL,CAAiBK,eAAjB,CACNH,SADM,EAEN,IAAII,4BAAJ,CAAwB,IAAxB,EAA8B,KAAKN,WAAnC,EAAgDG,QAAhD,EAA0DC,OAA1D,CAFM,CAAR;AAID;;;WASD,4BAAmBF,SAAnB,EAAuC;AACrC,WAAKF,WAAL,CAAiBO,sBAAjB,CAAwCL,SAAxC;AACD;;;WAMD,4BAAmBM,YAAnB,EAAsD;AACpDb,MAAAA,SAAS,CACPa,YAAY,CAACC,OAAb,KAAyB,IADlB,EAEP,+CAFO,CAAT;;AAIA,WAAKT,WAAL,CAAiBU,kBAAjB,CAAoCF,YAApC;AACD;;;WASD,uBAAcN,SAAd,EAAyC;AACvC,UAAMS,aAAa,GAAG,KAAKX,WAAL,CAAiBY,uBAAjB,CAAyCV,SAAzC,CAAtB;;AACA,aAAOS,aAAa,GAKhBA,aAAa,CAACE,MAAd,CAAqBhB,qBAArB,EAA4CiB,MAL5B,GAMhB,CANJ;AAOD;;;WAgBD,cAAKZ,SAAL,EAAwB;AACtB,UAAMS,aAAa,GAAG,KAAKX,WAAL,CAAiBY,uBAAjB,CAAyCV,SAAzC,CAAtB;;AACA,UAAIS,aAAJ,EAAmB;AACjB,aAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,aAAa,CAACG,MAAlC,EAA0CC,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMP,YAAY,GAAGG,aAAa,CAACI,CAAD,CAAlC;;AAGA,cAAIP,YAAY,IAAIA,YAAY,CAACL,QAAjC,EAA2C;AACzCK,YAAAA,YAAY,CAACL,QAAb,CAAsBc,KAAtB,CACET,YAAY,CAACJ,OADf,EAEEc,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAFF;AAID;AACF;AACF;AACF;;;WAeD,wBAAepB,SAAf,EAAkCC,QAAlC,EAA4C;AAC1C,UAAMQ,aAAa,GAAG,KAAKX,WAAL,CAAiBY,uBAAjB,CAAyCV,SAAzC,CAAtB;;AACA,UAAIS,aAAJ,EAAmB;AACjB,aAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,aAAa,CAACG,MAAlC,EAA0CC,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMP,YAAY,GAAGG,aAAa,CAACI,CAAD,CAAlC;;AAIA,cAAIP,YAAY,IAAIA,YAAY,CAACL,QAAb,KAA0BA,QAA9C,EAAwD;AACtDK,YAAAA,YAAY,CAACe,MAAb;AACD;AACF;AACF;AACF;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB3B,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @typecheck\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nconst sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  _subscriber: EventSubscriptionVendor;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): any);\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  listenerCount(eventType: string): number {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions\n      ? // We filter out missing entries because the array is sparse.\n        // \"callbackfn is called only for elements of the array which actually\n        // exist; it is not called for missing elements of the array.\"\n        // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n        subscriptions.filter(sparseFilterPredicate).length\n      : 0;\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1),\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]}