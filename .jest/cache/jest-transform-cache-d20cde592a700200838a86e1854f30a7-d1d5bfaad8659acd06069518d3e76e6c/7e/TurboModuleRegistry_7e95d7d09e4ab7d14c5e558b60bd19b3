4efb47ab690aefb49094aa22a2b35313
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.getEnforcing = getEnforcing;

var _invariant = _interopRequireDefault(require("invariant"));

var NativeModules = require('../BatchedBridge/NativeModules');

var turboModuleProxy = global.__turboModuleProxy;

function requireModule(name, schema) {
  if (!global.RN$Bridgeless) {
    var legacyModule = NativeModules[name];

    if (legacyModule != null) {
      return legacyModule;
    }
  }

  if (turboModuleProxy != null) {
    var module = schema != null ? turboModuleProxy(name, schema) : turboModuleProxy(name);
    return module;
  }

  return null;
}

function get(name) {
  var schema = arguments.length === 2 ? arguments[1] : undefined;
  return requireModule(name, schema);
}

function getEnforcing(name) {
  var schema = arguments.length === 2 ? arguments[1] : undefined;
  var module = requireModule(name, schema);
  (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
  return module;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlR1cmJvTW9kdWxlUmVnaXN0cnkuanMiXSwibmFtZXMiOlsiTmF0aXZlTW9kdWxlcyIsInJlcXVpcmUiLCJ0dXJib01vZHVsZVByb3h5IiwiZ2xvYmFsIiwiX190dXJib01vZHVsZVByb3h5IiwicmVxdWlyZU1vZHVsZSIsIm5hbWUiLCJzY2hlbWEiLCJSTiRCcmlkZ2VsZXNzIiwibGVnYWN5TW9kdWxlIiwibW9kdWxlIiwiZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZ2V0RW5mb3JjaW5nIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUlBOztBQUZBLElBQU1BLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGdDQUFELENBQTdCOztBQUlBLElBQU1DLGdCQUFnQixHQUFHQyxNQUFNLENBQUNDLGtCQUFoQzs7QUFFQSxTQUFTQyxhQUFULENBQXVDQyxJQUF2QyxFQUFxREMsTUFBckQsRUFBK0U7QUFFN0UsTUFBSSxDQUFDSixNQUFNLENBQUNLLGFBQVosRUFBMkI7QUFFekIsUUFBTUMsWUFBWSxHQUFHVCxhQUFhLENBQUNNLElBQUQsQ0FBbEM7O0FBQ0EsUUFBSUcsWUFBWSxJQUFJLElBQXBCLEVBQTBCO0FBQ3hCLGFBQVNBLFlBQVQ7QUFDRDtBQUNGOztBQUVELE1BQUlQLGdCQUFnQixJQUFJLElBQXhCLEVBQThCO0FBQzVCLFFBQU1RLE1BQVUsR0FDZEgsTUFBTSxJQUFJLElBQVYsR0FBaUJMLGdCQUFnQixDQUFDSSxJQUFELEVBQU9DLE1BQVAsQ0FBakMsR0FBa0RMLGdCQUFnQixDQUFDSSxJQUFELENBRHBFO0FBRUEsV0FBT0ksTUFBUDtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVNLFNBQVNDLEdBQVQsQ0FBNkJMLElBQTdCLEVBQStDO0FBVXBELE1BQU1DLE1BQU0sR0FBR0ssU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXJCLEdBQXlCRCxTQUFTLENBQUMsQ0FBRCxDQUFsQyxHQUF3Q0UsU0FBdkQ7QUFDQSxTQUFPVCxhQUFhLENBQUlDLElBQUosRUFBVUMsTUFBVixDQUFwQjtBQUNEOztBQUVNLFNBQVNRLFlBQVQsQ0FBc0NULElBQXRDLEVBQXVEO0FBVTVELE1BQU1DLE1BQU0sR0FBR0ssU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXJCLEdBQXlCRCxTQUFTLENBQUMsQ0FBRCxDQUFsQyxHQUF3Q0UsU0FBdkQ7QUFDQSxNQUFNSixNQUFNLEdBQUdMLGFBQWEsQ0FBSUMsSUFBSixFQUFVQyxNQUFWLENBQTVCO0FBQ0EsMEJBQ0VHLE1BQU0sSUFBSSxJQURaLEVBRUUsNkNBQTJDSixJQUEzQyw4QkFDRSx1RUFISjtBQUtBLFNBQU9JLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOYXRpdmVNb2R1bGVzID0gcmVxdWlyZSgnLi4vQmF0Y2hlZEJyaWRnZS9OYXRpdmVNb2R1bGVzJyk7XG5pbXBvcnQgdHlwZSB7VHVyYm9Nb2R1bGV9IGZyb20gJy4vUkNURXhwb3J0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuY29uc3QgdHVyYm9Nb2R1bGVQcm94eSA9IGdsb2JhbC5fX3R1cmJvTW9kdWxlUHJveHk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVNb2R1bGU8VDogVHVyYm9Nb2R1bGU+KG5hbWU6IHN0cmluZywgc2NoZW1hPzogPyRGbG93Rml4TWUpOiA/VCB7XG4gIC8vIEJyaWRnZWxlc3MgbW9kZSByZXF1aXJlcyBUdXJib01vZHVsZXNcbiAgaWYgKCFnbG9iYWwuUk4kQnJpZGdlbGVzcykge1xuICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgbGF5ZXIgZHVyaW5nIG1pZ3JhdGlvbi5cbiAgICBjb25zdCBsZWdhY3lNb2R1bGUgPSBOYXRpdmVNb2R1bGVzW25hbWVdO1xuICAgIGlmIChsZWdhY3lNb2R1bGUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuICgobGVnYWN5TW9kdWxlOiAkRmxvd0ZpeE1lKTogVCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR1cmJvTW9kdWxlUHJveHkgIT0gbnVsbCkge1xuICAgIGNvbnN0IG1vZHVsZTogP1QgPVxuICAgICAgc2NoZW1hICE9IG51bGwgPyB0dXJib01vZHVsZVByb3h5KG5hbWUsIHNjaGVtYSkgOiB0dXJib01vZHVsZVByb3h5KG5hbWUpO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldDxUOiBUdXJib01vZHVsZT4obmFtZTogc3RyaW5nKTogP1Qge1xuICAvKipcbiAgICogV2hhdCBpcyBTY2hlbWE/XG4gICAqXG4gICAqIEByZWFjdC1uYXRpdmUvYmFiZWwtcGx1Z2luLWNvZGVnZW4gd2lsbCBwYXJzZSB0aGUgTmF0aXZlTW9kdWxlXG4gICAqIHNwZWMsIGFuZCBwYXNzIGluIHRoZSBnZW5lcmF0ZWQgc2NoZW1hIGFzIHRoZSBzZWNvbmQgYXJndW1lbnRcbiAgICogdG8gdGhpcyBmdW5jdGlvbi4gVGhlIHNjaGVtIHdpbGwgdGhlbiBiZSB1c2VkIHRvIHBlcmZvcm0gbWV0aG9kXG4gICAqIGRpc3BhdGNoIG9uLCBhbmQgdHJhbnNsYXRlIGFyZ3VtZW50cy9yZXR1cm4gdG8gYW5kIGZyb20gdGhlIE5hdGl2ZVxuICAgKiBUdXJib01vZHVsZSBvYmplY3QuXG4gICAqL1xuICBjb25zdCBzY2hlbWEgPSBhcmd1bWVudHMubGVuZ3RoID09PSAyID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gcmVxdWlyZU1vZHVsZTxUPihuYW1lLCBzY2hlbWEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5mb3JjaW5nPFQ6IFR1cmJvTW9kdWxlPihuYW1lOiBzdHJpbmcpOiBUIHtcbiAgLyoqXG4gICAqIFdoYXQgaXMgU2NoZW1hP1xuICAgKlxuICAgKiBAcmVhY3QtbmF0aXZlL2JhYmVsLXBsdWdpbi1jb2RlZ2VuIHdpbGwgcGFyc2UgdGhlIE5hdGl2ZU1vZHVsZVxuICAgKiBzcGVjLCBhbmQgcGFzcyBpbiB0aGUgZ2VuZXJhdGVkIHNjaGVtYSBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50XG4gICAqIHRvIHRoaXMgZnVuY3Rpb24uIFRoZSBzY2hlbSB3aWxsIHRoZW4gYmUgdXNlZCB0byBwZXJmb3JtIG1ldGhvZFxuICAgKiBkaXNwYXRjaCBvbiwgYW5kIHRyYW5zbGF0ZSBhcmd1bWVudHMvcmV0dXJuIHRvIGFuZCBmcm9tIHRoZSBOYXRpdmVcbiAgICogVHVyYm9Nb2R1bGUgb2JqZWN0LlxuICAgKi9cbiAgY29uc3Qgc2NoZW1hID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMiA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgbW9kdWxlID0gcmVxdWlyZU1vZHVsZTxUPihuYW1lLCBzY2hlbWEpO1xuICBpbnZhcmlhbnQoXG4gICAgbW9kdWxlICE9IG51bGwsXG4gICAgYFR1cmJvTW9kdWxlUmVnaXN0cnkuZ2V0RW5mb3JjaW5nKC4uLik6ICcke25hbWV9JyBjb3VsZCBub3QgYmUgZm91bmQuIGAgK1xuICAgICAgJ1ZlcmlmeSB0aGF0IGEgbW9kdWxlIGJ5IHRoaXMgbmFtZSBpcyByZWdpc3RlcmVkIGluIHRoZSBuYXRpdmUgYmluYXJ5LicsXG4gICk7XG4gIHJldHVybiBtb2R1bGU7XG59XG4iXX0=