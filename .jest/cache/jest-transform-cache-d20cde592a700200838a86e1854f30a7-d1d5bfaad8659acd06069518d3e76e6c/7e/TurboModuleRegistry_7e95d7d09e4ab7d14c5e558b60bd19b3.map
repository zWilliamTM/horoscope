{"version":3,"sources":["TurboModuleRegistry.js"],"names":["NativeModules","require","turboModuleProxy","global","__turboModuleProxy","requireModule","name","schema","RN$Bridgeless","legacyModule","module","get","arguments","length","undefined","getEnforcing"],"mappings":"AAUA;;;;;;;;;;AAIA;;AAFA,IAAMA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;AAIA,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,kBAAhC;;AAEA,SAASC,aAAT,CAAuCC,IAAvC,EAAqDC,MAArD,EAA+E;AAE7E,MAAI,CAACJ,MAAM,CAACK,aAAZ,EAA2B;AAEzB,QAAMC,YAAY,GAAGT,aAAa,CAACM,IAAD,CAAlC;;AACA,QAAIG,YAAY,IAAI,IAApB,EAA0B;AACxB,aAASA,YAAT;AACD;AACF;;AAED,MAAIP,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,QAAMQ,MAAU,GACdH,MAAM,IAAI,IAAV,GAAiBL,gBAAgB,CAACI,IAAD,EAAOC,MAAP,CAAjC,GAAkDL,gBAAgB,CAACI,IAAD,CADpE;AAEA,WAAOI,MAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAEM,SAASC,GAAT,CAA6BL,IAA7B,EAA+C;AAUpD,MAAMC,MAAM,GAAGK,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyBD,SAAS,CAAC,CAAD,CAAlC,GAAwCE,SAAvD;AACA,SAAOT,aAAa,CAAIC,IAAJ,EAAUC,MAAV,CAApB;AACD;;AAEM,SAASQ,YAAT,CAAsCT,IAAtC,EAAuD;AAU5D,MAAMC,MAAM,GAAGK,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyBD,SAAS,CAAC,CAAD,CAAlC,GAAwCE,SAAvD;AACA,MAAMJ,MAAM,GAAGL,aAAa,CAAIC,IAAJ,EAAUC,MAAV,CAA5B;AACA,0BACEG,MAAM,IAAI,IADZ,EAEE,6CAA2CJ,IAA3C,8BACE,uEAHJ;AAKA,SAAOI,MAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nimport type {TurboModule} from './RCTExport';\nimport invariant from 'invariant';\n\nconst turboModuleProxy = global.__turboModuleProxy;\n\nfunction requireModule<T: TurboModule>(name: string, schema?: ?$FlowFixMe): ?T {\n  // Bridgeless mode requires TurboModules\n  if (!global.RN$Bridgeless) {\n    // Backward compatibility layer during migration.\n    const legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return ((legacyModule: $FlowFixMe): T);\n    }\n  }\n\n  if (turboModuleProxy != null) {\n    const module: ?T =\n      schema != null ? turboModuleProxy(name, schema) : turboModuleProxy(name);\n    return module;\n  }\n\n  return null;\n}\n\nexport function get<T: TurboModule>(name: string): ?T {\n  /**\n   * What is Schema?\n   *\n   * @react-native/babel-plugin-codegen will parse the NativeModule\n   * spec, and pass in the generated schema as the second argument\n   * to this function. The schem will then be used to perform method\n   * dispatch on, and translate arguments/return to and from the Native\n   * TurboModule object.\n   */\n  const schema = arguments.length === 2 ? arguments[1] : undefined;\n  return requireModule<T>(name, schema);\n}\n\nexport function getEnforcing<T: TurboModule>(name: string): T {\n  /**\n   * What is Schema?\n   *\n   * @react-native/babel-plugin-codegen will parse the NativeModule\n   * spec, and pass in the generated schema as the second argument\n   * to this function. The schem will then be used to perform method\n   * dispatch on, and translate arguments/return to and from the Native\n   * TurboModule object.\n   */\n  const schema = arguments.length === 2 ? arguments[1] : undefined;\n  const module = requireModule<T>(name, schema);\n  invariant(\n    module != null,\n    `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` +\n      'Verify that a module by this name is registered in the native binary.',\n  );\n  return module;\n}\n"]}